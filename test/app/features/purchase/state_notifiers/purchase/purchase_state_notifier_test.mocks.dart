// Mocks generated by Mockito 5.0.10 from annotations
// in numarketplace/test/app/features/purchase/state_notifiers/purchase/purchase_state_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:numarketplace/app/features/purchase/repositories/purchase_repository.dart'
    as _i4;
import 'package:numarketplace/app/shared/models/customer_model.dart' as _i6;
import 'package:numarketplace/app/shared/models/offer_model.dart' as _i7;
import 'package:numarketplace/app/shared/state_notifiers/customer/customer_state_notifier.dart'
    as _i3;
import 'package:state_notifier/state_notifier.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {
  @override
  String toString() => super.toString();
}

class _FakeCustomerState extends _i1.Fake implements _i3.CustomerState {}

/// A class which mocks [PurchaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseRepository extends _i1.Mock
    implements _i4.PurchaseRepository {
  MockPurchaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<String, _i6.CustomerModel>> purchase(
          _i7.OfferModel? offer) =>
      (super.noSuchMethod(Invocation.method(#purchase, [offer]),
              returnValue: Future<_i2.Either<String, _i6.CustomerModel>>.value(
                  _FakeEither<String, _i6.CustomerModel>()))
          as _i5.Future<_i2.Either<String, _i6.CustomerModel>>);
}

/// A class which mocks [CustomerStateNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerStateNotifier extends _i1.Mock
    implements _i3.CustomerStateNotifier {
  MockCustomerStateNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i8.ErrorListener? _onError) =>
      super.noSuchMethod(Invocation.setter(#onError, _onError),
          returnValueForMissingStub: null);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  _i5.Stream<_i3.CustomerState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.CustomerState>.empty())
          as _i5.Stream<_i3.CustomerState>);
  @override
  _i3.CustomerState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeCustomerState()) as _i3.CustomerState);
  @override
  set state(_i3.CustomerState? value) =>
      super.noSuchMethod(Invocation.setter(#state, value),
          returnValueForMissingStub: null);
  @override
  _i3.CustomerState get debugState =>
      (super.noSuchMethod(Invocation.getter(#debugState),
          returnValue: _FakeCustomerState()) as _i3.CustomerState);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void load() => super.noSuchMethod(Invocation.method(#load, []),
      returnValueForMissingStub: null);
  @override
  void addNewPurchase(_i7.OfferModel? offer) =>
      super.noSuchMethod(Invocation.method(#addNewPurchase, [offer]),
          returnValueForMissingStub: null);
  @override
  _i8.RemoveListener addListener(_i8.Listener<_i3.CustomerState>? listener,
          {bool? fireImmediately = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addListener, [listener], {#fireImmediately: fireImmediately}),
          returnValue: () {}) as _i8.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
